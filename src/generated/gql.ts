/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query ProjectDetails($projectId: ID!) {\n  node(id: $projectId) {\n    ... on ProjectV2 {\n      id\n      title\n      shortDescription\n      url\n      number\n      createdAt\n      closed\n      fields(first: 50) {\n        nodes {\n          ... on ProjectV2Field {\n            id\n            name\n            dataType\n          }\n          ... on ProjectV2IterationField {\n            id\n            name\n            dataType\n            configuration {\n              iterations {\n                startDate\n                duration\n              }\n            }\n          }\n          ... on ProjectV2SingleSelectField {\n            id\n            name\n            dataType\n            options {\n              id\n              name\n              color\n            }\n          }\n        }\n      }\n      items(first: 100) {\n        nodes {\n          id\n          type\n          content {\n            ... on Issue {\n              id\n              title\n              number\n              state\n              createdAt\n              updatedAt\n              author {\n                login\n                avatarUrl\n              }\n              body\n              url\n              repository {\n                name\n                owner {\n                  login\n                }\n              }\n              labels(first: 10) {\n                nodes {\n                  name\n                  color\n                }\n              }\n              assignees(first: 5) {\n                nodes {\n                  login\n                  avatarUrl\n                }\n              }\n            }\n            ... on PullRequest {\n              id\n              title\n              number\n              createdAt\n              updatedAt\n              author {\n                login\n                avatarUrl\n              }\n              body\n              url\n              repository {\n                name\n                owner {\n                  login\n                }\n              }\n              labels(first: 10) {\n                nodes {\n                  name\n                  color\n                }\n              }\n              assignees(first: 5) {\n                nodes {\n                  login\n                  avatarUrl\n                }\n              }\n            }\n          }\n          fieldValues(first: 50) {\n            nodes {\n              ... on ProjectV2ItemFieldTextValue {\n                text\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldDateValue {\n                date\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldIterationValue {\n                iterationId\n                title\n                startDate\n                duration\n                field {\n                  ... on ProjectV2IterationField {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldNumberValue {\n                number\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldSingleSelectValue {\n                name\n                field {\n                  ... on ProjectV2SingleSelectField {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n}": typeof types.ProjectDetailsDocument,
    "query UserData {\n  viewer {\n    login\n    name\n    projectsV2(first: 20) {\n      nodes {\n        id\n        title\n      }\n    }\n  }\n}": typeof types.UserDataDocument,
};
const documents: Documents = {
    "query ProjectDetails($projectId: ID!) {\n  node(id: $projectId) {\n    ... on ProjectV2 {\n      id\n      title\n      shortDescription\n      url\n      number\n      createdAt\n      closed\n      fields(first: 50) {\n        nodes {\n          ... on ProjectV2Field {\n            id\n            name\n            dataType\n          }\n          ... on ProjectV2IterationField {\n            id\n            name\n            dataType\n            configuration {\n              iterations {\n                startDate\n                duration\n              }\n            }\n          }\n          ... on ProjectV2SingleSelectField {\n            id\n            name\n            dataType\n            options {\n              id\n              name\n              color\n            }\n          }\n        }\n      }\n      items(first: 100) {\n        nodes {\n          id\n          type\n          content {\n            ... on Issue {\n              id\n              title\n              number\n              state\n              createdAt\n              updatedAt\n              author {\n                login\n                avatarUrl\n              }\n              body\n              url\n              repository {\n                name\n                owner {\n                  login\n                }\n              }\n              labels(first: 10) {\n                nodes {\n                  name\n                  color\n                }\n              }\n              assignees(first: 5) {\n                nodes {\n                  login\n                  avatarUrl\n                }\n              }\n            }\n            ... on PullRequest {\n              id\n              title\n              number\n              createdAt\n              updatedAt\n              author {\n                login\n                avatarUrl\n              }\n              body\n              url\n              repository {\n                name\n                owner {\n                  login\n                }\n              }\n              labels(first: 10) {\n                nodes {\n                  name\n                  color\n                }\n              }\n              assignees(first: 5) {\n                nodes {\n                  login\n                  avatarUrl\n                }\n              }\n            }\n          }\n          fieldValues(first: 50) {\n            nodes {\n              ... on ProjectV2ItemFieldTextValue {\n                text\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldDateValue {\n                date\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldIterationValue {\n                iterationId\n                title\n                startDate\n                duration\n                field {\n                  ... on ProjectV2IterationField {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldNumberValue {\n                number\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldSingleSelectValue {\n                name\n                field {\n                  ... on ProjectV2SingleSelectField {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n}": types.ProjectDetailsDocument,
    "query UserData {\n  viewer {\n    login\n    name\n    projectsV2(first: 20) {\n      nodes {\n        id\n        title\n      }\n    }\n  }\n}": types.UserDataDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProjectDetails($projectId: ID!) {\n  node(id: $projectId) {\n    ... on ProjectV2 {\n      id\n      title\n      shortDescription\n      url\n      number\n      createdAt\n      closed\n      fields(first: 50) {\n        nodes {\n          ... on ProjectV2Field {\n            id\n            name\n            dataType\n          }\n          ... on ProjectV2IterationField {\n            id\n            name\n            dataType\n            configuration {\n              iterations {\n                startDate\n                duration\n              }\n            }\n          }\n          ... on ProjectV2SingleSelectField {\n            id\n            name\n            dataType\n            options {\n              id\n              name\n              color\n            }\n          }\n        }\n      }\n      items(first: 100) {\n        nodes {\n          id\n          type\n          content {\n            ... on Issue {\n              id\n              title\n              number\n              state\n              createdAt\n              updatedAt\n              author {\n                login\n                avatarUrl\n              }\n              body\n              url\n              repository {\n                name\n                owner {\n                  login\n                }\n              }\n              labels(first: 10) {\n                nodes {\n                  name\n                  color\n                }\n              }\n              assignees(first: 5) {\n                nodes {\n                  login\n                  avatarUrl\n                }\n              }\n            }\n            ... on PullRequest {\n              id\n              title\n              number\n              createdAt\n              updatedAt\n              author {\n                login\n                avatarUrl\n              }\n              body\n              url\n              repository {\n                name\n                owner {\n                  login\n                }\n              }\n              labels(first: 10) {\n                nodes {\n                  name\n                  color\n                }\n              }\n              assignees(first: 5) {\n                nodes {\n                  login\n                  avatarUrl\n                }\n              }\n            }\n          }\n          fieldValues(first: 50) {\n            nodes {\n              ... on ProjectV2ItemFieldTextValue {\n                text\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldDateValue {\n                date\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldIterationValue {\n                iterationId\n                title\n                startDate\n                duration\n                field {\n                  ... on ProjectV2IterationField {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldNumberValue {\n                number\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldSingleSelectValue {\n                name\n                field {\n                  ... on ProjectV2SingleSelectField {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query ProjectDetails($projectId: ID!) {\n  node(id: $projectId) {\n    ... on ProjectV2 {\n      id\n      title\n      shortDescription\n      url\n      number\n      createdAt\n      closed\n      fields(first: 50) {\n        nodes {\n          ... on ProjectV2Field {\n            id\n            name\n            dataType\n          }\n          ... on ProjectV2IterationField {\n            id\n            name\n            dataType\n            configuration {\n              iterations {\n                startDate\n                duration\n              }\n            }\n          }\n          ... on ProjectV2SingleSelectField {\n            id\n            name\n            dataType\n            options {\n              id\n              name\n              color\n            }\n          }\n        }\n      }\n      items(first: 100) {\n        nodes {\n          id\n          type\n          content {\n            ... on Issue {\n              id\n              title\n              number\n              state\n              createdAt\n              updatedAt\n              author {\n                login\n                avatarUrl\n              }\n              body\n              url\n              repository {\n                name\n                owner {\n                  login\n                }\n              }\n              labels(first: 10) {\n                nodes {\n                  name\n                  color\n                }\n              }\n              assignees(first: 5) {\n                nodes {\n                  login\n                  avatarUrl\n                }\n              }\n            }\n            ... on PullRequest {\n              id\n              title\n              number\n              createdAt\n              updatedAt\n              author {\n                login\n                avatarUrl\n              }\n              body\n              url\n              repository {\n                name\n                owner {\n                  login\n                }\n              }\n              labels(first: 10) {\n                nodes {\n                  name\n                  color\n                }\n              }\n              assignees(first: 5) {\n                nodes {\n                  login\n                  avatarUrl\n                }\n              }\n            }\n          }\n          fieldValues(first: 50) {\n            nodes {\n              ... on ProjectV2ItemFieldTextValue {\n                text\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldDateValue {\n                date\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldIterationValue {\n                iterationId\n                title\n                startDate\n                duration\n                field {\n                  ... on ProjectV2IterationField {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldNumberValue {\n                number\n                field {\n                  ... on ProjectV2Field {\n                    id\n                    name\n                  }\n                }\n              }\n              ... on ProjectV2ItemFieldSingleSelectValue {\n                name\n                field {\n                  ... on ProjectV2SingleSelectField {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query UserData {\n  viewer {\n    login\n    name\n    projectsV2(first: 20) {\n      nodes {\n        id\n        title\n      }\n    }\n  }\n}"): (typeof documents)["query UserData {\n  viewer {\n    login\n    name\n    projectsV2(first: 20) {\n      nodes {\n        id\n        title\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;